openapi: 3.0.3
info:
  title: Shortlink Service
  description: It is an URL shortener service - it can generate a short version of
    arbitrary user's URL. Also user can get statistics for URL generated url (how
    much people followed the link).
  contact:
    email: ptsypyshev@gmail.com
  version: 1.0.0
servers:
- url: https://localhost
tags:
- name: link
  description: "Information about link (Long and short URLs, statistics, etc.)"
- name: user
  description: Operations about user
paths:
  /links:
    put:
      tags:
      - link
      summary: Update an existing link
      operationId: updateLink
      requestBody:
        description: Pet object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
        required: true
      responses:
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Link not found
          content: {}
        "405":
          description: Validation exception
          content: {}
      security:
      - external_auth:
        - write:links
        - read:links
      x-codegen-request-body-name: body
    post:
      tags:
      - link
      summary: Add a new link to the store
      operationId: addLink
      requestBody:
        description: Link object that needs to be added to the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Link'
        required: true
      responses:
        "405":
          description: Invalid input
          content: {}
      security:
      - external_auth:
        - write:links
        - read:links
      x-codegen-request-body-name: body
  /links/{linkId}:
    get:
      tags:
      - link
      summary: Find link by ID
      description: Returns a single link
      operationId: getLinkById
      parameters:
      - name: linkId
        in: path
        description: ID of link to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Link'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Pet not found
          content: {}
      security:
      - api_key: []
    post:
      tags:
      - link
      summary: Updates a link in the store with form data
      operationId: updateLinkWithForm
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: linkId
        in: path
        description: ID of pet that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/links_linkId_body'
      responses:
        "200":
          description: successful operation
          content: {}
        "405":
          description: Invalid input
          content: {}
      security:
      - external_auth:
        - write:links
        - read:links
    delete:
      tags:
      - link
      summary: Deletes a link
      operationId: deleteLink
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: linkId
        in: path
        description: Link id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content: {}
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Link not found
          content: {}
      security:
      - external_auth:
        - write:links
        - read:links
  /users:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
          content: {}
      x-codegen-request-body-name: body
  /users/login:
    post:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
        "400":
          description: Invalid username/password supplied
          content: {}
  /users/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /users/{username}:
    get:
      tags:
      - user
      summary: Get user by username
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name of user that needs to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
          content: {}
        "404":
          description: User not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
  /users/{username}/links:
    get:
      tags:
      - link
      summary: Get links by username
      operationId: getLinksByUsername
      parameters:
      - name: username
        in: path
        description: The name of user which links should to be fetched.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'
                x-content-type: application/json
        "400":
          description: Invalid username supplied
          content: {}
        "404":
          description: User not found
          content: {}
components:
  schemas:
    Link:
      type: object
      properties:
        id:
          type: integer
          format: int64
        shorkLink:
          type: string
        longLink:
          type: string
        clickCounter:
          type: integer
          format: int64
        clickers:
          type: array
          items:
            $ref: '#/components/schemas/Clicker'
        status:
          type: boolean
          default: false
      example:
        shorkLink: shorkLink
        longLink: longLink
        clickCounter: 6
        clickers:
        - country: country
          uniqueCookie: uniqueCookie
          ipAddress: ipAddress
          id: 1
          status: false
        - country: country
          uniqueCookie: uniqueCookie
          ipAddress: ipAddress
          id: 1
          status: false
        id: 0
        status: false
    Clicker:
      type: object
      properties:
        id:
          type: integer
          format: int64
        uniqueCookie:
          type: string
        ipAddress:
          type: string
          format: ipv4
        country:
          type: string
        status:
          type: boolean
          default: false
      example:
        country: country
        uniqueCookie: uniqueCookie
        ipAddress: ipAddress
        id: 1
        status: false
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        password:
          type: string
          format: password
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      example:
        firstName: firstName
        lastName: lastName
        password: ""
        userStatus: 6
        phone: phone
        id: 0
        email: ""
        username: username
    links_linkId_body:
      properties:
        longLink:
          type: string
          description: Updated long link
        status:
          type: string
          description: Updated status of the link
  securitySchemes:
    external_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://localhost/oauth/dialog
          scopes:
            write:links: modify links in your account
            read:links: read your links
    api_key:
      type: apiKey
      name: api_key
      in: header
